<!DOCTYPE html>
<html lang='en' data-theme="<%= theme %>">
<head>
  <%- include('partials/head') %>
  <%- include('partials/bootstrap-deps') %>
  <script src='/assets/vendor/json-formatter/json-formatter.js'></script>
  <style>
    .table-container {
      margin-bottom: 1rem;
      position: relative;
    }

    .filter-table {
      width: 100%;
      display: table;
    }
    
    /* removed to tweak styling */
    /* 
    .scroll-indicator {
      height: 100%;
      position: absolute;
      width: 100%;
    }

    .scroll-indicator::before {
      background-image: linear-gradient(to right, rgba(146, 146, 146, 0.5), #fff);
      content: '';
      height: 100%;
      left: 0;
      position: absolute;
      width: 5px;
    }

    .scroll-indicator::after {
      background-image: linear-gradient(to left, rgba(146, 146, 146, 0.5), #fff);
      content: '';
      height: 100%;
      position: absolute;
      right: 0;
      width: 5px;
    } */

    .table-wrapper {
      /* overflow-x: auto; */
      position: relative;
    }

    .table-container {
      padding-bottom: 1000px;
    }

    #actions-row th{
      background-color: white;
      position: sticky;
      top: 0;
    }

    .items-table {
      margin-bottom: 0;
      /* Need to reset max-width set by bootstrap to avoid
         problems with scroll indicator mask in Safari. */
      max-width: none;
      position: relative;
    }

    /* some table styling, making it more compact */
    .items-table td, .items-table th {
      padding: 10px;
    }

    .items-table .view {
      width: 30px;
    }

    /* mask for scroll indicators */
    .items-table::before {
      content: '';
      height: 100%;
      left: 0;
      pointer-events: none;
      position: absolute;
      top: 0;
      width: 100%;
    }

    .max-width {
      max-width: 150px;
      overflow: hidden;
    }

    .data-cell.date.future {
      background-color:lightgreen;
    }

  </style>
</head>
<body class="container-fluid">
  <header>
    <%
      const breadcrumb = [
        {
          href: '/',
          text: 'Tables',
        },
        {
          active: true,
          text: Table.TableName,
          badge: Table.ItemCount,
        },
      ]
    %>
    <%- include('partials/breadcrumb', { breadcrumb }) %>

    <ul class="nav nav-tabs">
      <li class="nav-item">
        <a class="nav-link active item-count" href="/tables/<%= Table.TableName %>">
          Items
        </a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/tables/<%= Table.TableName %>/get">
          Get
        </a>
      </li>
      <li class="nav-item">
        <a class="nav-link" href="/tables/<%= Table.TableName %>/meta">Meta</a>
      </li>
      <li class="nav-item ml-auto">
        <a href="/tables/<%= Table.TableName %>/add-item" class="nav-link">Create item</a>
      </li>
    </ul>
  </header>

  <main>
    <form
      autocomplete="off"
      action="/tables/<%= Table.TableName %>"
      method="get"
      style="padding-top: 20px;padding-bottom: 20px;"
      id="form"
    >
      <datalist id="attributes">
        <% for (let AttributeDefinition of Table.AttributeDefinitions) { %>
          <option value="<%= AttributeDefinition.AttributeName %>" />
        <% } %>
      </datalist>
      <table class="table table-bordered table-responsive filter-table">
        <tbody>
          <tr>
            <th>
              <select name="operationType" class="form-control">
                <option value="scan"<% if (query.operationType === 'scan') { %> selected<% } %>>Scan</option>
                <option value="query"<% if (query.operationType === 'query') { %> selected<% } %>>Query</option>
              </select>
            </th>
            <td>
              <select name="queryableSelection" class="form-control"<% if (!Table.GlobalSecondaryIndexes) { %> disabled<% } %>>
                <option value="table"
                  <% Table.KeySchema.forEach(keySchemaItem => { %>
                    data-key-<%= keySchemaItem.KeyType.toLowerCase() %>="<%= keySchemaItem.AttributeName %>"
                  <% }) %>
                  <% if (query.queryableSelection === 'table') { %> selected<% } %>
                >[Table] <%= Table.TableName %></option>
                <% if (Table.GlobalSecondaryIndexes) { %>
                  <% for (const index of Table.GlobalSecondaryIndexes) { %>
                    <% const attributes = index.KeySchema.map((keySchemaItem) => keySchemaItem.AttributeName) %>
                    <option value="<%= index.IndexName %>"
                      <% index.KeySchema.forEach(keySchemaItem => { %>
                        data-key-<%= keySchemaItem.KeyType.toLowerCase() %>="<%= keySchemaItem.AttributeName %>"
                      <% }) %>
                      <% if (query.queryableSelection === index.IndexName) { %> selected<% } %>
                      >[Index] <%= index.IndexName %>: <%= attributes.join(', ') %>
                    </option>
                  <% } %>
                <% } %>
              </select>
            </td>
          </tr>
          <tr>
            <th>
              Filter
              <div style="margin-top: 1em">
                <button id="add-filter" type="button" class="btn btn-secondary">Add Filter</button>
              </div>
            </th>
            <td>
              <table id="filters-table" class="table table-bordered">
                <tbody>
                  <tr>
                    <td style="width: 95px;">
                      <button type="button" onclick="removeFilter(this, event)" class="filter-remove btn btn-danger">Remove</button>
                    </td>
                    <td style="width: 300px">
                      <input
                        type="text"
                        class="form-control filter-row-key"
                        placeholder="Key"
                        list="attributes"
                      />
                    </td>
                    <td style="width: 125px">
                      <select class="form-control filter-row-type">
                        <% for (const type in attributeTypes) { %>
                          <option value="<%= type %>"><%= attributeTypes[type] %></option>
                        <% } %>
                      </select>
                    </td>
                    <td style="width: 140px">
                      <select class="form-control filter-row-operator">
                        <% for (const operator in operators) { %>
                          <option value="<%= operator %>"><%= operators[operator] %></option>
                        <% } %>
                      </select>
                    </td>
                    <td>
                      <input id="value" type="text" class="form-control filter-row-value" placeholder="Value" />
                    </td>
                  </tr>
                </tbody>
              </table>
            </td>
          </tr>
        </tbody>
      </table>
      <input id="filters" name="filters" type="hidden" />
      <div class="row">
        <div class="col-md-8 form-inline">
            <label class="form-label">
            Omitted props:
              <input id="omit" class="form-control ml-1" name="omit" type="text" value="<%= query.omit || '' %>" />
            </label>
            <label class="form-label ml-1">
            Picked props:
              <input id="pick" class="form-control ml-1" name="pick" type="text" value="<%= query.pick || '' %>" />
            </label>
            <label class="form-label ml-1">
            Sorted by:
              <input id="sort" class="form-control ml-1" name="sort" type="text" value="<%= query.sort || '' %>" />
            </label>
            <div class="form-check form-check-inline ml-1">
              <input class="form-check-input sort-direction" type="radio" type="radio" id="asc-radio" name="direction" value="asc" <% if (query.direction !=='desc' ) { %>
              checked<% } %>>
              <label class="form-check-label" for="asc-radio">Ascending</label>
            </div>
            <div class="form-check form-check-inline">
              <input class="form-check-input sort-direction" type="radio" type="radio" id="desc-radio" name="direction" value="desc" <% if
                (query.direction ==='desc' ) { %>
              checked<% } %>>
                <label class="form-check-label" for="desc-radio">Descending</label>
            </div>
              
            <button type="submit" class="btn btn-primary ml-1" accesskey="s">Search</button>
            <button type="button" id="reset" class="btn btn-secondary ml-1" accesskey="r">Reset</button>
        </div>
        <div class="col-md-4 pagination-container d-none">
            <nav style="float: right">
              <ul class="pagination" style="margin: 0">
                <li class="page-item page-item-previous disabled">
                  <a class="page-link page-link-previous" href="#">Previous Page</a>
                </li>
                <li class="page-item active">
                  <span class="page-link">Page <%= pageNum %></span>
                </li>
                 <li class="page-item page-item-next disabled">
                   <a class="page-link page-link-next" href="#">Next Page</a>
                 </li>
              </ul>
           </nav>
        </div>
      </div>
    </form>

    <script>
    /* global JSONFormatter, $ */
    const JSONRender = value => new JSONFormatter.default(value).render()

    const form = document.querySelector('#form')
    form.addEventListener('submit', (event, extra) => {
      const filters = {}

      document.querySelectorAll('#filters-table tr').forEach((filterRow) => {
        const keyField = filterRow.querySelector('.filter-row-key')
        const typeField = filterRow.querySelector('.filter-row-type')
        const operatorField = filterRow.querySelector('.filter-row-operator')
        const valueField = filterRow.querySelector('.filter-row-value')

        if (keyField.value && valueField.value) {
          filters[keyField.value] = {
            operator: operatorField.value,
            value: valueField.value,
            type: typeField.value,
          }
        }
      })

      form.filters.value = JSON.stringify(filters)
    })

    document.querySelector('select[name="queryableSelection"]').addEventListener('change', (event) => {
      const operationType = document.querySelector('select[name="operationType"]')

      if (operationType.value === 'query') {
        unrequireAllFilters()
        requireIndexFilters()
      }
    })

    document.querySelector('select[name="operationType"]').addEventListener('change', (event) => {
      if (event.target.value === 'query') {
        requireIndexFilters()
      } else {
        unrequireAllFilters()
      }
    })

    document.querySelector('#add-filter').addEventListener('click', (event) => {
      event.preventDefault()
      addFilter()
    })

    document.getElementById('reset').addEventListener('click', (event) => {
      for (const filterBtn of document.querySelectorAll('#filters-table button.filter-remove')) {
        removeFilter(filterBtn, {})
      }

      document.getElementById('omit').value = ''
      document.getElementById('filters').value = ''
      document.getElementById('pick').value = ''
      document.getElementById('sort').value = ''
      document.querySelector('.sort-direction[value="asc"]').checked = true
      $('#form button[type="submit"]').trigger('click')
    })
    
    const sortElements = [...document.querySelectorAll('.sort-direction')].map(el => el.addEventListener('click', (event) => {
       $('#form button[type="submit"]').trigger('click')
    }))
  
    function requireIndexFilters () {
      const querySelection = document.querySelector('select[name="queryableSelection"]')
      const option = querySelection.selectedOptions[0]
      const hashKey = option.getAttribute('data-key-hash')
      const rangeKey = option.getAttribute('data-key-range')

      if (hashKey) {
        addHashKeyFilter(hashKey)
      }

      if (rangeKey) {
        addRangeKeyFilter(rangeKey)
      }
    }

    function unrequireAllFilters () {
      document.querySelectorAll('#filters-table tr').forEach((filterRow) => {
        const keyField = filterRow.querySelector('.filter-row-key')
        keyField.removeAttribute('required')
        keyField.removeAttribute('readonly')
        filterRow.querySelector('.filter-row-value').removeAttribute('required')
        filterRow.querySelector('.filter-remove').removeAttribute('hidden')
        const operatorField = filterRow.querySelector('.filter-row-operator')
        operatorField.removeAttribute('disabled')
        operatorField.querySelectorAll('option').forEach((option) => {
          option.removeAttribute('disabled')
        })
      })
    }

    function addFilter (key, values, required, availableOperators) {
      let filterRow
      let lastRow
      if (key) {
        document.querySelectorAll('#filters-table tr').forEach((row) => {
          if (row.querySelector('.filter-row-key').value === key) {
            filterRow = row
          }
        })
      }

      if (!filterRow) {
        lastRow = document.querySelector('#filters-table tr:last-child')
        filterRow = lastRow.cloneNode(true)
        filterRow.querySelector('.filter-row-value').value = values && values.value ? values.value : ''
      }

      const keyField = filterRow.querySelector('.filter-row-key')
      keyField.value = key || ''

      if (required) {
        keyField.setAttribute('required', true)
        keyField.setAttribute('readonly', true)
        filterRow.querySelector('.filter-row-value').setAttribute('required', true)
        filterRow.querySelector('.filter-remove').setAttribute('hidden', true)
      } else {
        keyField.removeAttribute('required')
        keyField.removeAttribute('readonly')
        filterRow.querySelector('.filter-row-value').removeAttribute('required')
        filterRow.querySelector('.filter-remove').removeAttribute('hidden')
      }

      if (values && values.type) {
        const typeField = filterRow.querySelector('.filter-row-type')
        typeField.value = values.type
      }

      const operatorField = filterRow.querySelector('.filter-row-operator')

      if (values && values.operator) {
        operatorField.value = values.operator
      }

      operatorField.querySelectorAll('option').forEach((option) => {
        const enabled = availableOperators ? availableOperators.includes(option.value) : true
        if (enabled) {
          option.removeAttribute('disabled')
        } else {
          option.setAttribute('disabled', true)
        }
      })

      if (availableOperators && !availableOperators.includes(operatorField.value)) {
        operatorField.value = availableOperators[0]
      }

      if (availableOperators && availableOperators.length === 1) {
        operatorField.setAttribute('disabled', true)
      } else {
        operatorField.removeAttribute('disabled')
      }

      if (lastRow) {
        document.querySelector('#filters-table tbody').appendChild(filterRow)
      }
    }

    function addHashKeyFilter (hashKey, values) {
      addFilter(hashKey, values, true, ['='])
    }

    function addRangeKeyFilter (rangeKey, values) {
      addFilter(rangeKey, values, false, ['=', '<', '<=', '>', '>=', 'BETWEEN', 'begins_with'])
    }

    function removeFilter (node, event) {
      // prevent removal of the last filter row, instead, just clear it out
      if (document.querySelectorAll('#filters-table tr').length === 1) {
        const filterRow = document.querySelector('#filters-table tr')
        filterRow.querySelector('.filter-row-key').value = ''
        filterRow.querySelector('.filter-row-value').value = ''
      } else {
        node.closest('tr').remove()
      }

      // Shift click on remove filter button to search right away
      if (event.shiftKey) {
        $('#form button[type="submit"]').trigger('click')
      }
    }

    function updateFilterAutocomplete(uniqueKeys) {
      const listContainer = $('#attributes')
      listContainer.empty()
      listContainer.append(uniqueKeys.map(key => $(`<option value="${key}"></option>`)))
    }

    function renderItems(data) {
      $('#actions-row').append(data.uniqueKeys.map(key => '<th>' + key + '</th>'))

      // Add sort by clicking on table headers
      $('#actions-row th').click((event) => {
        const sortEl = document.getElementById('sort')
        const existingVal = sortEl.value
        sortEl.value = event.target.innerText.trim()

        const [ascRadio, descRadio] = document.querySelectorAll('.sort-direction')

        if(existingVal === sortEl.value) {
          if (ascRadio.checked) {
            descRadio.checked = true
          } else {
            ascRadio.checked = true
          }
        } else {
          ascRadio.checked = true
          descRadio.checked = false
        }

        $('#form button[type="submit"]').trigger('click')
      })

      if (data.Items.length) {
        $('#items-container').append(data.Items.map(item => {
          const viewUrl = '/tables/<%= Table.TableName %>/items/' + encodeURIComponent(Object.values(item.__key).join(','))
          const rowEl = $(`<tr><td class="view"><a href="${viewUrl}">View</a> <button type="button" data-entity-url="${viewUrl}" class="delete-item btn btn-danger">DELETE</button></td></tr>`)

          for (const column of data.uniqueKeys) {
            const columnEl = $('<td class="max-width"></td>')

            const value = item[column]
            let wrapperEl = null

            // removed, because we use ISO8601 for dates, not unix timestamps as numbers
            // if (Number.isInteger(value) && value >= 0) {
            //   let dateValue
            //   try {
            //     dateValue = new Date(value).toISOString()
            //   } catch (error) {
            //     dateValue = error.message
            //   }

            //   wrapperEl = $('<abbr class="data-cell" data-toggle="tooltip" data-placement="top" title="' + value + '"></abbr>')
            // } else {
            // Add some extra properties to hold data


            // mark values containing date with that class and add class if that date is in the future
            const ISO8601_REGEX = /(\d{4}-\d\d-\d\d)(T\d\d:\d\d:\d\d\.\d\d\dZ$)?/;
            const dateMatches = ISO8601_REGEX.exec(value)
            let dateValue = value
            if (dateMatches) {
              dateValue = dateMatches[0]
            }

            const isDate = !!dateMatches
            const isFuture = new Date(dateValue) > new Date()

            const isDateClass = isDate ? 'date' : ''
            const isFutureClass = isDate && isFuture ? 'future' : ''
            const classes = [isDateClass, isFutureClass].join(' ')

            wrapperEl = $(`<div class="preformatted data-cell ${classes}" data-toggle="tooltip" data-placement="top" key="` + column + '" cell-value="' + value + '" title="' + column +': ' + value + '"></div>')
            // }

            rowEl.append(columnEl.append(wrapperEl.append(JSONRender(value))))
          }

          return rowEl
        }))

        // delete item
        $('.delete-item').click((event) => {
          if (event.shiftKey) {
            const entityUrl = event.currentTarget.getAttribute('data-entity-url')
            fetch(entityUrl, {
              method: 'delete'
            }).then((response) => {
              if (response.ok) {
                window.location.reload()
              }
            }).catch((error) => {
              console.error(error)
              alert('There was an error.')
            })
          } else {
            alert('Hold shift to delete.')
          }
        })

        // copy value
        // $('#items-container .data-cell').click((event) => {
        //   if (event.shiftKey) {
        //     const cellValue = event.currentTarget.getAttribute('cell-value')
        //     navigator.clipboard.writeText(cellValue).then(() => {

        //       Notification.requestPermission().then((permission) => {
        //         // If the user accepts, let's create a notification
        //         if (permission === "granted") {
        //             const notification = new Notification(`Copied ${cellValue} to clipboard`);
        //         }
        //       });
              
        //     }, (err) => {
        //       alert('failed to write to clipboard')
        //     })
        //   }
        // })

        // Double click on a cell value to add filter for that column and value
        // searches right away
        // Press control right away to only add filter without searching
        $('#items-container .data-cell').dblclick((event) => {
          addFilter()   
          
          const addedFilter = $('#filters-table tr:last')
          
          addedFilter.find('.filter-row-key').val(event.currentTarget.getAttribute('key'))
          addedFilter.find('.filter-row-value').val(event.currentTarget.getAttribute('cell-value'))


          if (!event.shiftKey) {

            if (event.altKey) {
              $('#form').attr("target", "_blank"); 
            }

            $('#form button[type="submit"]').trigger('click')
          }
        })

        if (data.pageNum > 1) {
          $('.page-link-previous')
            .attr('href', '?startKey=' + data.prevKey + '&pageNum=' + (data.pageNum-1) + '&filters=' + data.filterQueryString)
          $('.page-item-previous').removeClass('disabled')
        }

        if (data.nextKey) {
          $('.page-link-next')
            .attr('href', '?startKey=' + data.nextKey + '&prevKey=' + data.prevKey + '&pageNum=' + (data.pageNum+1) + '&filters=' + data.filterQueryString)
          $('.page-item-next').removeClass('disabled')
        }

        const rangeFrom = ((data.pageNum - 1) * data.pageSize) + 1
        const rangeTo = rangeFrom + (data.Items.length - 1)
        $('.item-count').append(' (showing ' + rangeFrom + ' - ' + rangeTo + ')')

        $('.table-container').removeClass('d-none')
        $('.pagination-container').removeClass('d-none')
      } else {
        $('.no-results').removeClass('d-none')
      }

      $('#table-placeholder').addClass('d-none')

      updateFilterAutocomplete(data.uniqueKeys)
    }

    window.addEventListener('load', () => {
      const startOfNextQueryParam = location.search.substr(location.search.indexOf('filters=')).indexOf('&')
      const queryStringFilters = location.search.substr(location.search.indexOf('filters='), startOfNextQueryParam === -1 ? undefined : startOfNextQueryParam).substr(8)

      if (queryStringFilters.length > 0) {
        let queryFilters = {}
        try {
          queryFilters = JSON.parse(decodeURIComponent(queryStringFilters))
        } catch (ex) {}

        const operationType = document.querySelector('select[name="operationType"]').value
        for (const filterKey of Object.keys(queryFilters)) {
          const filterParams = queryFilters[filterKey]
          if (operationType === 'query') {
            const querySelection = document.querySelector('select[name="queryableSelection"]')
            const option = querySelection.selectedOptions[0]
            const hashKey = option.getAttribute('data-key-hash')
            const rangeKey = option.getAttribute('data-key-range')

            if (filterKey === hashKey) {
              addHashKeyFilter(filterKey, filterParams)
            } else if (filterKey === rangeKey) {
              addRangeKeyFilter(filterKey, filterParams)
            } else {
              addFilter(filterKey, filterParams)
            }
          } else {
            addFilter(filterKey, filterParams)
          }
        }
      }

      fetch(document.location.pathname + '/items' + document.location.search)
        .then(response => {
          if (response.ok) {
            return response.json()
          }

          return response.text().then(text => Promise.reject(new Error(text)))
        })
        .then(json => {
          renderItems(json)
        })
        .catch(error => {
          alert('Error loading data: ' + error)
        })
    })
    </script>

    <div id="table-placeholder" class="text-center">Loading data...</div>

    <div class="no-results text-danger text-center d-none">No results</div>

    <div class="table-container d-none">
      <div class="scroll-indicator"></div>
      <div class="table-wrapper">
        <table class="table items-table">
          <thead>
            <tr id="actions-row">
              <td>Actions</td>
            </tr>
          </thead>
          <tbody id="items-container">
          </tbody>
        </table>
      </div>
    </div>
  </main>
</body>
</html>
